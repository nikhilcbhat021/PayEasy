name: deploy to aws

on:
    push: 
        branches: 
            - main

# login
# setup buildx optional but recommended
# check build-push cmd
# build and push (file)
# verify push.

jobs:
    deploy:
        runs-on: ubuntu-latest
        steps:
            - 
                name: Checkout repository
                uses: actions/checkout@v4

            - 
                name: Login to Docker Hub
                uses: docker/login-action@v3
                with:
                    username: ${{ secrets.DOCKER_USERNAME }}
                    password: ${{ secrets.DOCKER_PASSWORD }}

            -
                name: Setup Docker Buildx
                uses: docker/setup-buildx-action@v3

            -
                name: Build and Push User_App Docker
                uses: docker/build-push-action@v6
                with:
                    context: .
                    file: ./docker/Dockerfile.userapp
                    push: true
                    tags: ${{ secrets.DOCKER_USERNAME }}/${{vars.DOCKER_USER_APP}}:latest
                    build-args: |
                        FE_PORT=${{secrets.FE_PORT}}
                        AUTH_TRUST_HOST=${{secrets.AUTH_TRUST_HOST}}
                        AUTH_URL=${{vars.AUTH_URL}}
                        AUTH_SECRET=${{secrets.AUTH_SECRET}}
                        AUTH_GITHUB_ID=${{secrets.AUTH_GITHUB_ID}}
                        AUTH_GITHUB_SECRET=${{secrets.AUTH_GITHUB_SECRET}}
                        CUSTOM_NAME__AUTH_GOOGLE_ID=${{secrets.CUSTOM_NAME__AUTH_GOOGLE_ID}}
                        CUSTOM_NAME__AUTH_GOOGLE_SECRET=${{secrets.CUSTOM_NAME__AUTH_GOOGLE_SECRET}}
                        AUTH_GOOGLE_ID=${{secrets.AUTH_GOOGLE_ID}}
                        AUTH_GOOGLE_SECRET=${{secrets.AUTH_GOOGLE_SECRET}}
                        ALLOWED_METHODS=${{secrets.ALLOWED_METHODS}}
                        ALLOWED_ORIGIN=${{secrets.ALLOWED_ORIGIN}}
                        ALLOWED_HEADERS=${{secrets.ALLOWED_HEADERS}}
                        MAX_AGE=${{secrets.MAX_AGE}}
                        CREDENTIALS=${{secrets.CREDENTIALS}}
                        DOMAIN_URL=${{secrets.DOMAIN_URL}}
                        DATABASE_URL=${{secrets.DATABASE_URL}}

            -
                name: Build and Push Backend_Webhook Docker
                uses: docker/build-push-action@v6
                with:
                    context: .
                    file: ./docker/Dockerfile.backend_webhook
                    push: true
                    tags: ${{ secrets.DOCKER_USERNAME }}/${{ vars.DOCKER_BACKEND_WEBHOOK_APP }}:latest
                    build-args: |
                        WEB_HOOK_PORT=${{secrets.WEB_HOOK_PORT}}
                        DATABASE_URL=${{secrets.DATABASE_URL}}
                        AUTH_URL=${{vars.AUTH_URL}}

            -
                name: Build and Push Dummy_Banks Docker
                uses: docker/build-push-action@v6
                with:
                    context: .
                    file: ./docker/Dockerfile.dummy_banks_ui
                    push: true
                    tags: ${{ secrets.DOCKER_USERNAME }}/${{ vars.DOCKER_DUMMY_BANKS_APP }}:latest
                    build-args: |
                        DUMMY_BANKS_PORT=${{secrets.DUMMY_BANKS_PORT}}

            -
                name: Pull latest image in EC2 and re-deploy
                uses: appleboy/ssh-action@master
                with:
                    host: ${{ secrets.SSH_HOST }}
                    username: ${{ secrets.SSH_USERNAME }}
                    key: ${{ secrets.SSH_KEY }}
                    script: |

                        ### We are now, inside the ec2 machine and not inside the github azure machine, where the workflow is running.
                        ### If the EC2 Instance doesn't have docker installed, the below commands will fail.
                        
                        # pull both images from dock-hub
                        # sudo set +e
                        sudo docker pull ${{ secrets.DOCKER_USERNAME }}/${{ vars.DOCKER_USER_APP }}:latest

                        sudo docker pull ${{ secrets.DOCKER_USERNAME }}/${{ vars.DOCKER_BACKEND_WEBHOOK_APP }}:latest

                        sudo docker pull ${{ secrets.DOCKER_USERNAME }}/${{ vars.DOCKER_DUMMY_BANKS_APP }}:latest

                        # stop the running docks (user_app, webhook)
                        sudo docker stop user-app || true
                        sudo docker stop webhook-backend || true
                        sudo docker stop dummy-banks || true
                        # docker stop  || true

                        # rm the running docks (user_app, webhook) || true
                            # the above 2 could have been replaced with kill, if we can get the sha-id of the container.
                        sudo docker rm user-app || true
                        sudo docker rm webhook-backend || true
                        sudo docker rm dummy-banks || true

                        # docker run -d --name user_app -p 8080:8080 ncb021/payment-app:latest ... (-e if any)
                        sudo docker run -d --name webhook-backend -p ${{secrets.WEB_HOOK_PORT}}:${{secrets.WEB_HOOK_PORT}} -e DATABASE_URL=${{ secrets.DATABASE_URL }}  ${{ secrets.DOCKER_USERNAME }}/${{ vars.DOCKER_BACKEND_WEBHOOK_APP }}:latest

                        sudo docker run -d --name user-app -p ${{secrets.DUMMY_BANKS_PORT}}:${{secrets.DUMMY_BANKS_PORT}} ${{ secrets.DOCKER_USERNAME }}/${{ vars.DOCKER_DUMMY_BANKS_APP }}:latest

                        # docker run -d --name webhook -p 8081:8081  ncb021/webhook:latest ... (-e if any)
                        sudo docker run -d --name user-app -p ${{secrets.FE_PORT}}:${{secrets.FE_PORT}} -e DATABASE_URL=${{ secrets.DATABASE_URL }} ${{ secrets.DOCKER_USERNAME }}/${{ vars.DOCKER_USER_APP }}:latest

                        # sudo set -e